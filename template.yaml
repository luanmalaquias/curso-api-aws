AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  alunos-api-aws

  Sample SAM Template for alunos-api-aws

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Resources:
  BucketUploadImageEcommerce:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-upload-image-ecommerce"
  BucketQrCode:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-bucket-qrcode"
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      OwnershipControls: 
        Rules:
          - ObjectOwnership: BucketOwnerEnforced

  BucketQrCodePolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketQrCode
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${BucketQrCode}/*"

  # BucketUploadImageEcommercePolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref BucketUploadImageEcommerce
  #     PolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action:
  #             - s3:GetObject
  #           Resource: !Sub "{BucketUploadImageEcommerce.Arn}/*"

  CreatePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: presignedUrl/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 3
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketUploadImageEcommerce
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
      Events:
        ApiEcommerce:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: get
    
  CategorizeImageFuncion:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: categorize/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          SQS_URL: !Ref DetectLabelQueue
      Policies:
        - RekognitionDetectOnlyPolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName

  DetectLabelQueue:
    Type: AWS::SQS::Queue

  GenerateContentFunction:
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: generateContent/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          MODEL_ID: us.anthropic.claude-3-5-haiku-20241022-v1:0
          PROMPT_TITLE: "Considere ser um especialista em marketing e copywrite, escreva uma título chamativo para meu produto com base nas etiquetas que irei disponibilizar logo mais. O resultado precisa ser somente o título. Deixe claro o que é o produto em seu título. Gere em português. Etiquetas: "
          PROMPT_DESCRIPTON: "Considere ser um especialista em marketing e copywrite, escreva uma descrição do produto. Em português BR. Em no máximo 1 parágrafo. Utilize as seguintes etiquetas e o título para identificar melhor o produto: "
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
          LAMBDAQRCODENAME: !Ref GenerateQrCodeFunction
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "*"
        - SQSPollerPolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: "*"
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DetectLabelQueue.Arn

  BedrockMetadataImagesS3Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  GetProductById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getProductById/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 3
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
        - SQSPollerPolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
      Events:
        ApiEcommerce:
          Type: Api
          Properties:
            Path: /products/{id}
            Method: get
      
  GetAllProducts:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getAllProducts/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 3
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
        - SQSPollerPolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
      Events:
        ApiEcommerce:
          Type: Api
          Properties:
            Path: /products
            Method: get

  GenerateQrCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.13
      CodeUri: generateQrCodeFunction/
      FunctionName: "GenerateQrCodeFunction"
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketQrCode
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketQrCode
        # - Statement:
        #     - Effect: Allow
        #       Action: "s3:GetObject"
        #       Resource: 
        #         - !Sub "arn:aws:s3:::${BucketQrCode}/*"

Outputs:
  ApiEcommerce:
    Description: API Gateway endpoint URL for Prod stage for function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/presigned-url/"
  CreatePresignedUrlFunction:
    Description: Lambda Function ARN
    Value: !GetAtt CreatePresignedUrlFunction.Arn
  CreatePresignedUrlFunctionIamRole:
    Description: Implicit IAM Role created for function
    Value: !GetAtt CreatePresignedUrlFunction.Arn